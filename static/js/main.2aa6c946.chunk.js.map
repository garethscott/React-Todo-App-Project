{"version":3,"sources":["components/TextBox.js","components/Button.js","components/List.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["TextBox","props","className","placeholder","onChange","handleChange","value","Button","type","List","mappedList","mapList","map","task","key","_id","onClick","handleDelete","loading","ClearButton","handleClear","App","state","list","taskList","loaded","test","e","setState","target","handleSubmit","a","preventDefault","newTask","console","log","axios","post","then","response","catch","error","handleFetch","id","delete","res","data","temp","filter","fetch","result","json","this","onSubmit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2aa6c946.chunk.js","sourcesContent":["import React from 'react';\nimport './TextBox.css'\n\n\nexport const TextBox = (props) => {\n    return (\n        <input className=\"text-box\" placeholder=\"Enter task...\" onChange={props.handleChange} value={props.value} />\n    )\n\n}","import React from 'react'\nimport './Button.css'\n\nexport const Button = (props) => {\n    return (\n        <button type=\"submit\" className=\"sub-btn\">Add Task</button>\n    )\n}","import React from 'react';\nimport './List.css'\n\n\nexport const List = (props) => {\n\n    const mappedList = props.mapList.map((task) => {\n\n        return <div className=\"list-box\" key={task._id}>\n\n            <p className=\"task-text\">{task.task}</p>\n\n\n            <h3 className=\"x-text\" onClick={() => props.handleDelete(task._id)}>X</h3>\n\n\n        </div>\n    })\n    return (\n        <div>\n            {props.loading\n                ? <div>{mappedList}</div>\n                : <h1 className=\"loading\">Loading...</h1>\n            }\n\n        </div>\n    )\n}\n\n\n\n\n\n// export const List = (props) => {\n//     const mappedList = props.mapList.map((task, index) => {\n\n//         return <div className=\"list-box\" key={index.key}>\n//             <div key={index.key} className=\"text-con\">\n//                 <p key={index.key} className=\"task-text\">{task.text}</p>\n//             </div>\n//             <div key={index.key} className=\"x-con\">\n//                 <h3 key={index.key} className=\"x-text\">X</h3>\n//             </div>\n\n//         </div>\n//     })\n//     return (\n//         <div>{mappedList}</div>\n//     )\n// }\n\n\n// onClick = {() => props.handleDelete(index.key)}","import React from 'react';\nimport './ClearButton.css';\n\nexport const ClearButton = (props) => (\n    <button className=\"clear-btn\" onClick={props.handleClear}>Clear</button>\n)","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { TextBox } from './components/TextBox'\nimport { Button } from './components/Button'\nimport { List } from './components/List'\nimport { ClearButton } from './components/ClearButton'\n\nclass App extends React.Component {\n  state = {\n    list: [],\n    task: '',\n    taskList: [],\n    loaded: false,\n    test: ''\n  }\n  //Test\n\n  // async componentDidMount() {\n  //   await fetch('http://localhost:4058/tasks')\n  //     .then(result => {\n  //       return result.json();\n  //     })\n  //     .then(data =>\n  //       this.setState({\n  //         taskList: data,\n  //         loaded: true\n  //       })\n  //     )\n  //     .catch(error => this.setState({ error, loaded: false }));\n  // }\n\n  async handleFetch() {\n    await fetch('http://localhost:4059/tasks')\n      .then(result => {\n        return result.json();\n      })\n      .then(data =>\n        this.setState({\n          taskList: data,\n          loaded: true\n        })\n      )\n      .catch(error => this.setState({ error, loaded: false }));\n\n    console.log(\"handleFetch activated\")\n  }\n\n  componentDidMount() {\n    this.handleFetch()\n  }\n\n\n  handleChange = (e) => {\n    this.setState({\n      task: e.target.value,\n    })\n  }\n\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    const newTask = {\n      task: this.state.task\n    }\n    console.log(this.state.task)\n\n    await axios.post('http://localhost:4059/tasks', newTask)\n      .then(response => {\n        console.log(response)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    this.handleFetch()\n\n    this.setState({ task: \"\" })\n  }\n\n\n  handleDelete = (id) => {\n    axios.delete(`http://localhost:4059/tasks/${id}`)\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      });\n\n    console.log(id)\n    let temp = this.state.taskList.filter(task =>\n      task._id !== id)\n\n    this.setState({\n      taskList: temp\n    })\n\n  }\n\n  handleClear = () => {\n    axios.delete('http://localhost:4059/tasks')\n      .then(res => {\n        console.log(res)\n        console.log(res.data)\n      })\n    this.setState({ taskList: [] })\n  }\n\n  render() {\n    // console.log(this.state.taskList)\n    // console.log(this.state.loaded)\n    // console.log(this.state.taskList[1].task)\n    return (\n      <div className=\"app\">\n        <div className=\"wrapper\">\n          <div className=\"margins\">\n            <div className=\"input-and-btn\">\n              <form onSubmit={this.handleSubmit}>\n                <TextBox handleChange={this.handleChange} value={this.state.task} />\n                <Button />\n              </form>\n            </div>\n\n            <div className=\"list\">\n              <List mapList={this.state.taskList} loading={this.state.loaded} handleDelete={this.handleDelete} />\n            </div>\n            <div className=\"clear-btn-con\">\n              <ClearButton handleClear={this.handleClear} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}